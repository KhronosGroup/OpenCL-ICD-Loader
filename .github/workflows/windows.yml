name: Windows

on: [push, pull_request]

jobs:
  msvc:
    runs-on: windows-2022
    strategy:
      matrix:
        VER: [v142, v143, clangcl]
        EXT: [ON, OFF]
        GEN: [Visual Studio 17 2022]
        BIN: [x64, x86]
        STD: [99, 11, 17]
        include:
          - VER: v141
            EXT: OFF
            GEN: Ninja Multi-Config
            BIN: x64
            STD: 99
    env:
      NINJA_URL: https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip
      NINJA_ROOT: C:\Tools\Ninja
      VS_ROOT: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise'
      UseMultiToolTask: true # Better parallel MSBuild execution

    steps:
    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v2

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v2
      with:
        repository: KhronosGroup/OpenCL-Headers
        path: external/OpenCL-Headers

    - name: Cache Ninja install
      if: matrix.GEN == 'Ninja Multi-Config'
      id: ninja-install
      uses: actions/cache@v2
      with:
        path: |
          C:\Tools\Ninja
        key: ${{runner.os}}-ninja-${{env.NINJA_URL}}

    - name: Install Ninja
      if: matrix.GEN == 'Ninja Multi-Config' && steps.ninja-install.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Invoke-WebRequest ${env:NINJA_URL} -OutFile ~\Downloads\ninja-win.zip
        Expand-Archive ~\Downloads\ninja-win.zip -DestinationPath ${env:NINJA_ROOT}\
        Remove-Item ~\Downloads\*

    - name: Build & install OpenCL-Headers (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        $C_FLAGS = '/w'
        & cmake `
          -G '${{matrix.GEN}}' `
          -A $BIN `
          -T ${{matrix.VER}} `
          -D BUILD_TESTING=OFF `
          -D CMAKE_C_FLAGS="$C_FLAGS" `
          -D CMAKE_C_STANDARD=${{matrix.STD}} `
          -D CMAKE_C_EXTENSIONS=${{matrix.EXT}} `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build
        if ($LASTEXITCODE -ne 0) { throw "Configuring OpenCL-Headers failed." }
        & cmake `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build `
          --target install `
          --config Release `
          -- `
          /verbosity:minimal `
          /maxCpuCount `
          /noLogo
        if ($LASTEXITCODE -ne 0) { throw "Building/installing OpenCL-Headers failed." }

    - name: Build & install OpenCL-Headers (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}"
        $C_FLAGS = '/w'
        & cmake `
          -G '${{matrix.GEN}}' `
          -D BUILD_TESTING=OFF `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe" `
          -D CMAKE_C_FLAGS="${C_FLAGS}" `
          -D CMAKE_C_STANDARD=${{matrix.STD}} `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_INSTALL_PREFIX="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install" `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build
        if ($LASTEXITCODE -ne 0) { throw "Configuring OpenCL-Headers failed." }
        & cmake `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build `
          --target install `
          --config Release `
          -- `
          -j ${env:NUMBER_OF_PROCESSORS}

    - name: Configure (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        $C_FLAGS = '/W4 /WX'
        $CXX_FLAGS = '/W4 /WX /EHsc'
        & cmake `
          -G '${{matrix.GEN}}' `
          -A $BIN `
          -T ${{matrix.VER}} `
          -D OPENCL_LAYERS_BUILD_TESTING=ON `
          -D BUILD_TESTING=ON `
          -D CMAKE_C_FLAGS="${C_FLAGS}" `
          -D CMAKE_C_STANDARD=${{matrix.STD}} `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_CXX_FLAGS="${CXX_FLAGS}" `
          -D CMAKE_CXX_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_INSTALL_PREFIX="${env:GITHUB_WORKSPACE}\install" `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install" `
          -S "${env:GITHUB_WORKSPACE}" `
          -B "${env:GITHUB_WORKSPACE}\build"

    - name: Configure (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}"
        $C_FLAGS = '/W4 /WX'
        $CXX_FLAGS = '/W4 /WX /EHsc'
        & cmake `
          -G '${{matrix.GEN}}' `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe" `
          -D OPENCL_LAYERS_BUILD_TESTING=ON `
          -D BUILD_TESTING=ON `
          -D CMAKE_C_FLAGS="${C_FLAGS}" `
          -D CMAKE_C_STANDARD=${{matrix.STD}} `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_CXX_FLAGS="${CXX_FLAGS}" `
          -D CMAKE_CXX_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_EXE_LINKER_FLAGS='/INCREMENTAL' `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install" `
          -S "${env:GITHUB_WORKSPACE}" `
          -B "${env:GITHUB_WORKSPACE}\build"

    - name: Build (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            --build "${env:GITHUB_WORKSPACE}\build" `
            --config ${Config} `
            -- `
            /verbosity:minimal `
            /maxCpuCount `
            /noLogo
          if ($LASTEXITCODE -ne 0) { throw "Building OpenCL-ICD-Loader in ${Config} failed." }
        }

    - name: Build (Ninja)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}"
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            --build "${env:GITHUB_WORKSPACE}\build" `
            --config ${Config} `
            -- `
            -j ${env:NUMBER_OF_PROCESSORS}
          if ($LASTEXITCODE -ne 0) { throw "Building OpenCL-ICD-Loader in ${Config} failed." }
        }

    - name: Test
      shell: pwsh
      run: |
        $REG_PATH = if('${{matrix.BIN}}' -eq 'x86') { `
          'HKLM:\SOFTWARE\WOW6432Node\Khronos\OpenCL\Vendors' } else { `
          'HKLM:\SOFTWARE\Khronos\OpenCL\Vendors' }
        New-Item -Type Directory ${REG_PATH} -Force | Out-Null
        foreach ($Config in 'Release','Debug') { `
          Write-Host "Running CTest on ${Config}"
          Set-ItemProperty -Path ${REG_PATH} -Name "${env:GITHUB_WORKSPACE}\build\${Config}\OpenCLDriverStub.dll" -Type DWord -Value 0
          & ctest `
            --test-dir ${env:GITHUB_WORKSPACE}\build `
            --build-config ${Config} `
            --output-on-failure `
            --no-tests=error `
            --parallel ${env:NUMBER_OF_PROCESSORS}
          if ($LASTEXITCODE -ne 0) { throw "Testing OpenCL-ICD-Loader in ${Config} failed." }
          Remove-ItemProperty -Path ${REG_PATH} -Name "${env:GITHUB_WORKSPACE}\build\${Config}\OpenCLDriverStub.dll"
        }

    - name: Install
      shell: pwsh
      run: |
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            --install ${env:GITHUB_WORKSPACE}\build `
            --prefix ${env:GITHUB_WORKSPACE}\install-${Config} `
            --config ${Config}
          if ($LASTEXITCODE -ne 0) { throw "Installing OpenCL-ICD-Loader in ${Config} failed." }
        }
        if (-not (Test-Path ${env:GITHUB_WORKSPACE}\install-Debug\bin\OpenCL.pdb)) { `
          throw "No OpenCL.pdb installed"
        }

    - name: "Consume (MSBuild standalone): Configure/Build/Test"
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        $REG_PATH = if('${{matrix.BIN}}' -eq 'x86') { `
          'HKLM:\SOFTWARE\WOW6432Node\Khronos\OpenCL\Vendors' } else { `
          'HKLM:\SOFTWARE\Khronos\OpenCL\Vendors' }
        New-Item -Type Directory ${REG_PATH} -Force | Out-Null
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        $C_FLAGS = '/W4 /WX'
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            -G '${{matrix.GEN}}' `
            -A $BIN `
            -T ${{matrix.VER}} `
            -D BUILD_TESTING=ON `
            -D CMAKE_C_FLAGS="${C_FLAGS}" `
            -D CMAKE_C_STANDARD=${{matrix.STD}} `
            -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
            -D CMAKE_EXE_LINKER_FLAGS=/INCREMENTAL `
            -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install;${env:GITHUB_WORKSPACE}\install-${Config}" `
            -D DRIVER_STUB_PATH=${env:GITHUB_WORKSPACE}\build\Release\OpenCLDriverStub.dll `
            -B ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            -S ${env:GITHUB_WORKSPACE}\test\pkgconfig\bare
          if ($LASTEXITCODE -ne 0) { throw "Consuming standalone OpenCL-ICD-Loader in ${Config} failed." }
          & cmake `
            --build ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            --config ${Config} `
            -- `
            /verbosity:minimal `
            /maxCpuCount `
            /noLogo
          if ($LASTEXITCODE -ne 0) { throw "Consuming standalone OpenCL-ICD-Loader in ${Config} failed." }
          Set-ItemProperty -Path ${REG_PATH} -Name "${env:GITHUB_WORKSPACE}\build\${Config}\OpenCLDriverStub.dll" -Type DWord -Value 0
          & ctest `
            --test-dir ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            --build-config ${Config} `
            --output-on-failure `
            --no-tests=error `
            --parallel ${env:NUMBER_OF_PROCESSORS}
          if ($LASTEXITCODE -ne 0) { throw "Consuming standalone OpenCL-ICD-Loader in ${Config} failed." }
          Remove-ItemProperty -Path ${REG_PATH} -Name "${env:GITHUB_WORKSPACE}\build\${Config}\OpenCLDriverStub.dll"
        }

    - name: "Consume (Ninja-Multi-Config standalone): Configure/Build/Test"
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $REG_PATH = if('${{matrix.BIN}}' -eq 'x86') { `
          'HKLM:\SOFTWARE\WOW6432Node\Khronos\OpenCL\Vendors' } else { `
          'HKLM:\SOFTWARE\Khronos\OpenCL\Vendors' }
        New-Item -Type Directory ${REG_PATH} -Force | Out-Null
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}"
        $C_FLAGS = '/W4 /WX'
        $CXX_FLAGS = '/W4 /WX /EHsc'
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            -G '${{matrix.GEN}}' `
            -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe" `
            -D BUILD_TESTING=ON `
            -D CMAKE_C_FLAGS="${C_FLAGS}" `
            -D CMAKE_C_STANDARD=${{matrix.STD}} `
            -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
            -D CMAKE_EXE_LINKER_FLAGS='/INCREMENTAL' `
            -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install;${env:GITHUB_WORKSPACE}\install-${Config}" `
            -D DRIVER_STUB_PATH=${env:GITHUB_WORKSPACE}\build\Release\OpenCLDriverStub.dll `
            -B ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            -S ${env:GITHUB_WORKSPACE}\test\pkgconfig\bare
          if ($LASTEXITCODE -ne 0) { throw "Consuming standalone OpenCL-ICD-Loader in ${Config} failed." }
          & cmake `
            --build ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            --config ${Config} `
            -- `
            -j ${env:NUMBER_OF_PROCESSORS}
          if ($LASTEXITCODE -ne 0) { throw "Consuming standalone OpenCL-ICD-Loader in ${Config} failed." }
          Set-ItemProperty -Path ${REG_PATH} -Name "${env:GITHUB_WORKSPACE}\build\${Config}\OpenCLDriverStub.dll" -Type DWord -Value 0
          & ctest `
            --test-dir ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            --build-config ${Config} `
            --output-on-failure `
            --no-tests=error `
            --parallel ${env:NUMBER_OF_PROCESSORS}
          if ($LASTEXITCODE -ne 0) { throw "Consuming standalone OpenCL-ICD-Loader in ${Config} failed." }
          Remove-ItemProperty -Path ${REG_PATH} -Name "${env:GITHUB_WORKSPACE}\build\${Config}\OpenCLDriverStub.dll"
        }

    - name: "Consume (MSBuild SDK): Configure/Build/Test"
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        cmake -E make_directory $GITHUB_WORKSPACE\install\share\cmake\OpenCL ;
        New-Item -Type File -Path $GITHUB_WORKSPACE/install/share/cmake/OpenCL/OpenCLConfig.cmake -Value 'include("${{runner.workspace}}/OpenCL-ICD-Loader/external/OpenCL-Headers/install/share/cmake/OpenCLHeaders/OpenCLHeadersTargets.cmake")\ninclude("${CMAKE_CURRENT_LIST_DIR}/../OpenCLICDLoader/OpenCLICDLoaderTargets.cmake")' ;
        $REG_PATH = if('${{matrix.BIN}}' -eq 'x86') { `
          'HKLM:\SOFTWARE\WOW6432Node\Khronos\OpenCL\Vendors' } else { `
          'HKLM:\SOFTWARE\Khronos\OpenCL\Vendors' }
        New-Item -Type Directory ${REG_PATH} -Force | Out-Null
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        $C_FLAGS = '/W4 /WX'
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            -G '${{matrix.GEN}}' `
            -A $BIN `
            -T ${{matrix.VER}} `
            -D BUILD_TESTING=ON `
            -D CMAKE_C_FLAGS="${C_FLAGS}" `
            -D CMAKE_C_STANDARD=${{matrix.STD}} `
            -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
            -D CMAKE_EXE_LINKER_FLAGS=/INCREMENTAL `
            -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install;${env:GITHUB_WORKSPACE}\install-${Config}" `
            -D DRIVER_STUB_PATH=${env:GITHUB_WORKSPACE}\build\Release\OpenCLDriverStub.dll `
            -B ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            -S ${env:GITHUB_WORKSPACE}\test\pkgconfig\bare
          if ($LASTEXITCODE -ne 0) { throw "Consuming SDK component OpenCL-ICD-Loader in ${Config} failed." }
          & cmake `
            --build ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            --config ${Config} `
            -- `
            /verbosity:minimal `
            /maxCpuCount `
            /noLogo
          if ($LASTEXITCODE -ne 0) { throw "Consuming SDK component OpenCL-ICD-Loader in ${Config} failed." }
          Set-ItemProperty -Path ${REG_PATH} -Name "${env:GITHUB_WORKSPACE}\build\${Config}\OpenCLDriverStub.dll" -Type DWord -Value 0
          & ctest `
            --test-dir ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            --build-config ${Config} `
            --output-on-failure `
            --no-tests=error `
            --parallel ${env:NUMBER_OF_PROCESSORS}
          if ($LASTEXITCODE -ne 0) { throw "Consuming SDK component OpenCL-ICD-Loader in ${Config} failed." }
          Remove-ItemProperty -Path ${REG_PATH} -Name "${env:GITHUB_WORKSPACE}\build\${Config}\OpenCLDriverStub.dll"
        }

    - name: "Consume (Ninja-Multi-Config SDK): Configure/Build/Test"
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        cmake -E make_directory $GITHUB_WORKSPACE\install\share\cmake\OpenCL ;
        New-Item -Type File -Path $GITHUB_WORKSPACE/install/share/cmake/OpenCL/OpenCLConfig.cmake -Value 'include("${{runner.workspace}}/OpenCL-ICD-Loader/external/OpenCL-Headers/install/share/cmake/OpenCLHeaders/OpenCLHeadersTargets.cmake")\ninclude("${CMAKE_CURRENT_LIST_DIR}/../OpenCLICDLoader/OpenCLICDLoaderTargets.cmake")' ;
        $REG_PATH = if('${{matrix.BIN}}' -eq 'x86') { `
          'HKLM:\SOFTWARE\WOW6432Node\Khronos\OpenCL\Vendors' } else { `
          'HKLM:\SOFTWARE\Khronos\OpenCL\Vendors' }
        New-Item -Type Directory ${REG_PATH} -Force | Out-Null
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}"
        $C_FLAGS = '/W4 /WX'
        $CXX_FLAGS = '/W4 /WX /EHsc'
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            -G '${{matrix.GEN}}' `
            -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe" `
            -D BUILD_TESTING=ON `
            -D CMAKE_C_FLAGS="${C_FLAGS}" `
            -D CMAKE_C_STANDARD=${{matrix.STD}} `
            -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
            -D CMAKE_EXE_LINKER_FLAGS='/INCREMENTAL' `
            -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install;${env:GITHUB_WORKSPACE}\install-${Config}" `
            -D DRIVER_STUB_PATH=${env:GITHUB_WORKSPACE}\build\Release\OpenCLDriverStub.dll `
            -B ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            -S ${env:GITHUB_WORKSPACE}\test\pkgconfig\bare
          if ($LASTEXITCODE -ne 0) { throw "Consuming SDK component OpenCL-ICD-Loader in ${Config} failed." }
          & cmake `
            --build ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            --config ${Config} `
            -- `
            -j ${env:NUMBER_OF_PROCESSORS}
          if ($LASTEXITCODE -ne 0) { throw "Consuming SDK component OpenCL-ICD-Loader in ${Config} failed." }
          Set-ItemProperty -Path ${REG_PATH} -Name "${env:GITHUB_WORKSPACE}\build\${Config}\OpenCLDriverStub.dll" -Type DWord -Value 0
          & ctest `
            --test-dir ${env:GITHUB_WORKSPACE}\build\downstream\bare `
            --build-config ${Config} `
            --output-on-failure `
            --no-tests=error `
            --parallel ${env:NUMBER_OF_PROCESSORS}
          if ($LASTEXITCODE -ne 0) { throw "Consuming SDK component OpenCL-ICD-Loader in ${Config} failed." }
          Remove-ItemProperty -Path ${REG_PATH} -Name "${env:GITHUB_WORKSPACE}\build\${Config}\OpenCLDriverStub.dll"
        }